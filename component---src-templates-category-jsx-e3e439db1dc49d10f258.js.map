{"version":3,"sources":["webpack:///./src/components/AuthorThumbnail/AuthorThumbnail.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/templates/category.jsx"],"names":["AuthorThumbnail","render","this","props","avatar","name","className","src","alt","data-pin-nopin","React","Component","PostListing","postList","postEdges","authorEdges","map","postEdge","path","node","fields","slug","tags","frontmatter","cover","title","date","author","AuthorModel","getAuthor","SiteConfig","blogAuthorId","excerpt","timeToRead","getPostList","postAuthors","post","post_class","PostFormatting","key","PostHeader","to","image","AuthorLink","url","uid","PostTags","prefix","PostDate","CategoryTemplate","location","category","pageContext","data","allMarkdownRemark","authors","edges","authorsEdges","config","siteTitle"],"mappings":"mKAoBeA,G,UAjBM,8DAclB,OAdkB,qBACnBC,OAAA,WACE,MAAyBC,KAAKC,MAAtBC,EAAM,EAANA,OAAQC,EAAI,EAAJA,KAChB,OAAID,GAAUC,EAEV,yBACEC,UAAU,eACVC,IAAKH,EACLI,IAAKH,EACLI,iBAAe,SAId,MACR,EAdkB,CAASC,IAAMC,Y,6FCyB9BC,G,UAAW,8DAuCd,OAvCc,qBACfX,OAAA,WACE,MAAmCC,KAAKC,MAClCU,EAnBU,SAACC,EAAWC,GAAW,OACzCD,EAAUE,KAAI,SAAAC,GAAQ,MAAK,CACzBC,KAAMD,EAASE,KAAKC,OAAOC,KAC3BC,KAAML,EAASE,KAAKI,YAAYD,KAChCE,MAAOP,EAASE,KAAKI,YAAYC,MACjCC,MAAOR,EAASE,KAAKI,YAAYE,MACjCC,KAAMT,EAASE,KAAKI,YAAYG,KAChCC,OAAQC,IAAYC,UAClBd,EACAE,EAASE,KAAKI,YAAYI,OAC1BG,IAAWC,cAEbC,QAASf,EAASE,KAAKa,QACvBC,WAAYhB,EAASE,KAAKc,eAMTC,CADA,EAATpB,UAAsB,EAAXqB,aAGnB,OACE,6BAEGtB,EAASG,KAAI,SAAAoB,GACZ,IAAQX,EAA6CW,EAA7CX,MAAOP,EAAsCkB,EAAtClB,KAAMc,EAAgCI,EAAhCJ,QAASL,EAAuBS,EAAvBT,OAAQL,EAAec,EAAfd,KAAMI,EAASU,EAATV,KACtCpB,EAAY8B,EAAKC,WAAaD,EAAKC,WAAa,OAEtD,OACE,kBAACC,EAAA,EAAc,CAAChC,UAAWA,EAAWiC,IAAKd,GACzC,kBAACe,EAAA,EAAU,KACT,wBAAIlC,UAAU,cACZ,kBAAC,OAAI,CAACmC,GAAIvB,GAAOO,KAGrB,6BAASnB,UAAU,gBAEjB,2BACM0B,EAAO,IACX,kBAAC,OAAI,CAAC1B,UAAU,YAAYmC,GAAIvB,GAAM,OAK1C,4BAAQZ,UAAU,aAChB,kBAAC,EAAe,CAACF,OAAQuB,EAAOe,MAAOrC,KAAMsB,EAAOtB,OACpD,kBAACsC,EAAA,EAAU,CAACC,IAAG,WAAajB,EAAOkB,IAAOxC,KAAMsB,EAAOtB,OACvD,kBAACyC,EAAA,EAAQ,CAACC,OAAO,OAAOzB,KAAMA,IAC9B,kBAAC0B,EAAA,EAAQ,CAACtB,KAAMA,WAO7B,EAvCc,CAAShB,IAAMC,YA0CjBC,O,gLC/DTqC,EAAgB,8DAoBnB,OApBmB,qBACpBhD,OAAA,WACE,MAIIC,KAAKC,MAHP+C,EAAQ,EAARA,SACeC,EAAQ,EAAvBC,YAAeD,SAAQ,IACvBE,KAAQC,EAAiB,EAAjBA,kBAAmBC,EAAO,EAAPA,QAGvBzC,EAAYwC,EAAkBE,MAC9BC,EAAeF,EAAQC,MAC7B,OACE,kBAAC,IAAM,CAACN,SAAUA,GAChB,yBAAK5C,UAAU,sBACb,kBAAC,IAAM,CACLmB,MAAK,sBAAwB0B,EAAQ,OAAOO,IAAOC,YAErD,kBAAC,IAAW,CAAC7C,UAAWA,EAAWqB,YAAasB,OAIvD,EApBmB,CAAS/C,IAAMC,WA+DtBsC,a","file":"component---src-templates-category-jsx-e3e439db1dc49d10f258.js","sourcesContent":["import React from \"react\";\nimport \"./AuthorThumbnail.css\";\n\nclass AuthorThumbnail extends React.Component {\n  render() {\n    const { avatar, name } = this.props;\n    if (avatar && name) {\n      return (\n        <img\n          className=\"author-thumb\"\n          src={avatar}\n          alt={name}\n          data-pin-nopin=\"true\"\n        />\n      );\n    }\n    return null;\n  }\n}\n\nexport default AuthorThumbnail;\n","import  React from \"react\";\nimport { Link } from \"gatsby\";\nimport AuthorThumbnail from \"../AuthorThumbnail/AuthorThumbnail\";\nimport PostTags from \"../PostTags/PostTags\";\nimport SiteConfig from \"../../../data/SiteConfig\";\nimport AuthorLink from \"../AuthorLink/AuthorLink\";\nimport PostFormatting from \"../PostFormatting/PostFormatting\";\nimport PostHeader from \"../PostHeader/PostHeader\";\nimport PostDate from \"../PostDate/PostDate\";\nimport AuthorModel from \"../../models/author-model\";\nimport \"./PostListing.css\";\n\nconst getPostList = (postEdges, authorEdges) =>\n  postEdges.map(postEdge => ({\n    path: postEdge.node.fields.slug,\n    tags: postEdge.node.frontmatter.tags,\n    cover: postEdge.node.frontmatter.cover,\n    title: postEdge.node.frontmatter.title,\n    date: postEdge.node.frontmatter.date,\n    author: AuthorModel.getAuthor(\n      authorEdges,\n      postEdge.node.frontmatter.author,\n      SiteConfig.blogAuthorId\n    ),\n    excerpt: postEdge.node.excerpt,\n    timeToRead: postEdge.node.timeToRead\n  }));\n\nclass PostListing extends React.Component {\n  render() {\n    const { postEdges, postAuthors } = this.props;\n    const postList = getPostList(postEdges, postAuthors);\n\n    return (\n      <div>\n        {/* This is the post loop - each post will be output using this markup */}\n        {postList.map(post => {\n          const { title, path, excerpt, author, tags, date } = post;\n          const className = post.post_class ? post.post_class : \"post\";\n\n          return (\n            <PostFormatting className={className} key={title}>\n              <PostHeader>\n                <h2 className=\"post-title\">\n                  <Link to={path}>{title}</Link>\n                </h2>\n              </PostHeader>\n              <section className=\"post-excerpt\">\n                {/* TODO limit excerpt to 26 words */}\n                <p>\n                  {`${excerpt} `}\n                  <Link className=\"read-more\" to={path}>\n                    &raquo;\n                  </Link>\n                </p>\n              </section>\n              <footer className=\"post-meta\">\n                <AuthorThumbnail avatar={author.image} name={author.name} />\n                <AuthorLink url={`/author/${author.uid}`} name={author.name} />\n                <PostTags prefix=\" on \" tags={tags} />\n                <PostDate date={date} />\n              </footer>\n            </PostFormatting>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\nimport Layout from \"../components/layout\";\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const {\n      location,\n      pageContext: { category },\n      data: { allMarkdownRemark, authors }\n    } = this.props;\n\n    const postEdges = allMarkdownRemark.edges;\n    const authorsEdges = authors.edges;\n    return (\n      <Layout location={location}>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} postAuthors={authorsEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n    # authors\n    authors: allAuthorsJson {\n      edges {\n        node {\n          uid\n          name\n          image\n          url\n          bio\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n"],"sourceRoot":""}